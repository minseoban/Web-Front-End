깃.깃허브 테스트

커밋(commit) : 파일을 추가, 변경된 내용을 저장소에 저장하는 작업
푸시(push) : 파일을 추가, 변경된 내용을 "원격"저장소에 저장(업로드)하는 작업

깃허브를 사용하게 되면 2개의 저장소를 가집니다.
저장소(로컬저장소) : 내 컴퓨터에 있는 공간이며 1차로 여기에 저장됩니다.
원격 저장소 : 로컬 저장소에 저장된 내용이 깃허브 사이트에 업로드 되는 곳입니다.

브랜치
버전관리 기능
코드를 수정하고 저장할 때 마다 그 분기점을 저장해 놓아서 이후 그 지점으로 복귀 할 수 있으며, 이전과 비교하여 달라진 점 등을 확인할 수
있는 기능입니다. 백업용으로 핵심 기능입니다.

Git
버전관리 시스템의 종류
버전관리: 여러 파일을 하나의 버전으로 묶어 관리하는것

버전 관리 시스템의 종류

1. 클라이언트 - 서버 모델
    - 하나의 중앙 서버 여러 클라이언트들이 각자 필요한 데이터만 가져와서 작업을 하고, 다시 중앙 서버로
    보내서 통합하는 방식
    - CVS, SVN

2. 분산 모델
    - 하나의 중앙 서버가 존재하지만 여러 클라이언트들은 각자의 컴퓨터 저장소에 전체 사본을 가지고 작업하는 방식
    - Git

    Git의 장점
    - 동시에 작업하는 사람들과 소스코드를 주고 받을 필요가 없음
    - 같은 파일을 여러명이 동시에 병렬 개발이 가능
    - 변동 과정에 체계적으로 관리할 수 있고, 언제든지 지난 시점의 버전으로 되돌릴 수 있음 
    - 인터넷이 연결되지 않은 곳에서도 개발을 진행할 수 있으며, 중앙 서버의 데이터가 유실되어도 다시 복구할 수 있음

    1. 구글에서 'git설치' 검색
    2. 좌측 메뉴 'download' 클릭
    3. 자신의 운영체제에 맞는 프로그램을 다운로드
    4. git이 설치되어 있는지 학인
    - cmder에서 git 명령어로 확인

    5. 기본설정으로 설치
    터미널 기본 명령어
    컨트롤 + L :화면 클리어
    pwd: 현재 디렉토리 경로를 표시
    ls: 현재 디렉토리에 존재하는 디렉토리와 파일을 표시
    cd: 다른 디렉토리로 이동
    cd.. : 상위 디렉토리로 이동
    cd 디렉토리명: 해당 디렉토리로 이동


    6. git 로컬 저장소 생성  
    git init
    ls -al
    숨긴 디렉토리까지 확인

    7. git에 버전 관리 파일들을 생성
    test.txt, index.html

    8. 버전관리 파일 선택 gitg
    파일을 하나만 선택
    - git add 파일명.확장자
    - git add test.txt
    파일을 모두를 선택
    - git add .

    9. 버전관리 파일 커밋 
    git commit -m "index.html 버전관리"

    [오류발생시 해결방법]
    git config --global user.email "깃허브에 사용할 이메일 주소"
    git config --global user.name "이름"

    10. 로그 확인
    git log 

    11. 브런치명 설정
    git pull origin 브랜치명(main)

    13. 로컬 저장소에 github 저장소 주소 설정
    git remote add origin git@github.com:gomaci/test01.git   
        
        -> 연결 상태
        git remote -v
        -> 연결 해제
        git remote remove origin

        *****웹 자격 증명 관리 => window 자격증명에서 깃허브 계정 편집및 삭제

    14. 만든 커밋 github 푸시
        git push -u origin master
        git push origin master

    [이전에 연결된 깃허브를 사용]
    15. 다시 재선택
        git add . 
    16. 커밋 대기 
        git commit -m "메시지입력"
    17  브런치명 설정
        git pull origin main  
    18  푸시 
        git push -u origin main 또는
        git push origin main